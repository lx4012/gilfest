import timeimport pyautoguifrom PIL import Imagefrom PIL import ImageChopsfrom random import shufflefrom random import randrange# script to farm gilfest# it was designed for qualifiers, adjusted for main event and later will be updated for finals.# by lx4012# Requeriments:# windows 10# python 3# pip install pyautogui# windows resolution 1920x1080# nox resolution 960x540 but the window must be maximized (not full screen)# edmond must have swimsuit# party order: Skadi (support) - Arash - Waver - Edmond - Skadi (own) - anythin else# required essences: kaleid or mlb IE on Arash + Event Damage CE on Edmonddef get_crop(image_resource, start, end):    top = start[0]    left = start[1]    bottom = end[0]    right = end[1]    rectangle = (top, left, bottom, right)    return image_resource.crop(rectangle)def is_not_contained(a, b):    return ImageChops.difference(a, b).getbbox()def is_contained(a, b):    return not is_not_contained(a, b)def is_this_element_on_the_screen(element_image_path, element_location_start, element_location_end):    element_image = Image.open(element_image_path)    element_location = get_crop(pyautogui.screenshot(), element_location_start, element_location_end)    return is_contained(element_image, element_location)def wait_until_is_gone(element_image_path, element_location_start, element_location_end):    element_image = Image.open(element_image_path)    while True:        time.sleep(1)        element_location = get_crop(pyautogui.screenshot(), element_location_start, element_location_end)        if is_not_contained(element_image, element_location):            return True    return Falsedef wait_until_is_show(element_image_path, element_location_start, element_location_end):    element_image = Image.open(element_image_path)    while True:        time.sleep(1)        element_location = get_crop(pyautogui.screenshot(), element_location_start, element_location_end)        if is_contained(element_image, element_location):            return True    return Falsedef get_skadi():    print("Looking for skadi")    point_a = [1441, 473]    point_b = [1499, 536]    if is_this_element_on_the_screen("images/skadi_support_skill_slot_1.bmp", point_a, point_b):        print("Found skadi at slot 1")        return point_a    point_a = [1441, 753]    point_b = [1501, 814]    if is_this_element_on_the_screen("images/skadi_support_skill_slot_2.bmp", point_a, point_b):        print("Found skadi at slot 2")        return point_a    print("No skadi were found")    return Nonedef wait_until_support_list_is_refreshed():    print("waiting for supports...")    point_a = [620, 792]    point_b = [709, 844]    return wait_until_is_gone("images/no_button.bmp", point_a, point_b)def wait_until_ap_is_refilled():    print("waiting for ap refill...")    point_a = [568, 790]    point_b = [768, 845]    return wait_until_is_gone("images/cancel_button.bmp", point_a, point_b)def wait_until_arash_is_ready():    print("waiting for arash...")    point_a = [807, 797]    point_b = [891, 881]    return wait_until_is_show("images/damager_skill_2_1.bmp", point_a, point_b)def wait_until_edmond_is_ready():    print("waiting for edmond...")    point_a = [807, 797]    point_b = [891, 881]    return wait_until_is_show("images/damager_skill_2_2.bmp", point_a, point_b)def wait_for_battle_results():    print("waiting for battle results...")    point_a = [879, 415]    point_b = [992, 478]    return wait_until_is_show("images/edmond_eyes.bmp", point_a, point_b)def did_i_ran_out_of_ap():    point_a = [1451, 196]    point_b = [1477, 687]    return is_this_element_on_the_screen("images/scrollbar.bmp", point_a, point_b)def can_use_bronze_apples():    point_a = [500, 659]    point_b = [638, 790]    return is_this_element_on_the_screen("images/apple_bronze.bmp", point_a, point_b)def can_use_silver_apples():    point_a = [500, 452]    point_b = [638, 584]    return is_this_element_on_the_screen("images/apple_silver.bmp", point_a, point_b)def can_use_golden_apples():    point_a = [500, 243]    point_b = [638, 381]    return is_this_element_on_the_screen("images/apple_golden.bmp", point_a, point_b)# Main# TODO user level up that add 1 friend slot break the repeat systemfirst_refresh = Trueservant_cards_indexes = [0, 1, 2, 3, 4]servant_cards_coords = [[224, 750], [592, 773], [931, 721], [1297, 755], [1687, 755]]print("Waiting...")time.sleep(5)print("LETS FUCKING GO")while True:    skadi_found = get_skadi()    if skadi_found != None:        first_refresh = True        # press over skadi        pyautogui.click(x=skadi_found[0], y=skadi_found[1])        time.sleep(3)        wait_until_arash_is_ready()        ####################################################### Turn 1        # press arash skill 3        pyautogui.click(x=847, y=840)        time.sleep(3)        # press attack        pyautogui.click(x=1626, y=885)        time.sleep(4)        # STELLAAAAAAAAAAAAAAAAAAA        pyautogui.click(x=945, y=317)        time.sleep(3)        # press 2 random cards        for i in range(0, 2):            shuffle(servant_cards_indexes)            card_index = randrange(len(servant_cards_indexes))            card_index = servant_cards_indexes.pop(card_index)            card_coords = servant_cards_coords[card_index]            pyautogui.click(x=card_coords[0], y=card_coords[1])            time.sleep(2)        servant_cards_indexes = [0, 1, 2, 3, 4]        wait_until_edmond_is_ready()        ####################################################### Turn 2        # press waver skill 3        pyautogui.click(x=1284, y=838)        time.sleep(3)        # press waver skill 2        pyautogui.click(x=1162, y=840)        time.sleep(3)        # press waver skill 1        pyautogui.click(x=1034, y=839)        time.sleep(1)        # press over edmond        pyautogui.click(x=807, y=797)        time.sleep(3)        ####################################################### SWAP        # press master skills        pyautogui.click(x=1714, y=471)        time.sleep(2)        # press swap skill        pyautogui.click(x=1553, y=471)        time.sleep(3)        # press skadi (own) face        pyautogui.click(x=1076, y=524)        time.sleep(2)        # press waver face        pyautogui.click(x=791, y=520)        time.sleep(2)        # press replace        pyautogui.click(x=933, y=911)        time.sleep(2)        wait_until_edmond_is_ready()                ####################################################### Turn 2 resume                # press skadi (own) skill 3        pyautogui.click(x=1284, y=838)        time.sleep(1)        # press over edmond        pyautogui.click(x=807, y=797)        time.sleep(3)        # press skadi (own) skill 1        pyautogui.click(x=1034, y=839)        time.sleep(1)        # press over edmond        pyautogui.click(x=807, y=797)        time.sleep(3)        # press skadi (support) skill 1        pyautogui.click(x=137, y=839)        time.sleep(1)        # press over edmond        pyautogui.click(x=807, y=797)        time.sleep(3)        # press edmond skill 2        pyautogui.click(x=713, y=841)        time.sleep(3)        # press attack        pyautogui.click(x=1626, y=885)        time.sleep(4)        # press edmond noble phantasm        pyautogui.click(x=945, y=317)        time.sleep(3)        # press 2 random cards        for i in range(0, 2):            shuffle(servant_cards_indexes)            card_index = randrange(len(servant_cards_indexes))            card_index = servant_cards_indexes.pop(card_index)            card_coords = servant_cards_coords[card_index]            pyautogui.click(x=card_coords[0], y=card_coords[1])            time.sleep(2)        servant_cards_indexes = [0, 1, 2, 3, 4]        wait_until_edmond_is_ready()        ####################################################### Turn 3        # press skadi (support) skill 3        pyautogui.click(x=406, y=838)        time.sleep(1)        # press over edmond        pyautogui.click(x=807, y=797)        time.sleep(3)        # press edmond skill 1        pyautogui.click(x=589, y=838)        time.sleep(3)        # press attack        pyautogui.click(x=1626, y=885)        time.sleep(4)        # press edmond noble phantasm        pyautogui.click(x=945, y=317)        time.sleep(3)        # press 2 random cards        for i in range(0, 2):            shuffle(servant_cards_indexes)            card_index = randrange(len(servant_cards_indexes))            card_index = servant_cards_indexes.pop(card_index)            card_coords = servant_cards_coords[card_index]            pyautogui.click(x=card_coords[0], y=card_coords[1])            time.sleep(2)        servant_cards_indexes = [0, 1, 2, 3, 4]        wait_for_battle_results()        time.sleep(2)        ####################################################### Battle results        #TODO handle mc/player/bond level up        # press center        pyautogui.click(x=879, y=415)        time.sleep(2)        # press center        pyautogui.click(x=879, y=415)        time.sleep(2)        # press next        pyautogui.click(x=1585, y=985)        time.sleep(2)        # press repeat        pyautogui.click(x=1217, y=827)        time.sleep(2)        if did_i_ran_out_of_ap():            # scroll down apple list            pyautogui.moveTo(1463, 410)            pyautogui.dragTo(1463, 600, 1)            time.sleep(1)            if can_use_bronze_apples():                # select bronze apple                pyautogui.click(x=566, y=728)            elif can_use_silver_apples():                # select silver apple                pyautogui.click(x=566, y=522)            elif can_use_golden_apples():                # select golden apple                pyautogui.click(x=566, y=316)            else:                print("No apples left baby")                break            time.sleep(1)            # confirm apple usage            pyautogui.click(x=1222, y=820)            wait_until_ap_is_refilled()        # wait until support list load        # TODO this could be optimized        time.sleep(15)    else:        if first_refresh:            first_refresh = False        else:            time.sleep(16)        # Press refresh list        pyautogui.click(x=1274, y=191)        time.sleep(2)        # Confirm refresh list        pyautogui.click(x=1265, y=848)        wait_until_support_list_is_refreshed()        time.sleep(2)