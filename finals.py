import cv2import timeimport numpy as npimport pyautoguifrom random import shufflefrom random import randrangedef is_this_element_on_the_screen(template, img_rgb):    threshold = 0.84    w, h = template.shape[::-1]    img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)    res = cv2.matchTemplate(img_gray,template,cv2.TM_CCOEFF_NORMED)    loc = np.where( res >= threshold)    for pt in zip(*loc[::-1]):        return [pt[0] + w, pt[1] + h]    return Nonedef wait_until_is_gone(element_image_path):    print("Waiting...")    image_resource = cv2.imread(element_image_path, 0)    element_location = None    while element_location != None:        time.sleep(1)        screen_resource = cv2.cvtColor(np.array(pyautogui.screenshot()), cv2.COLOR_RGB2BGR)        element_location = is_this_element_on_the_screen(image_resource, screen_resource)    print("Gone")def wait_until_is_show(element_image_path):    print("Waiting...")    image_resource = cv2.imread(element_image_path, 0)    element_location = None    while element_location == None:        time.sleep(1)        screen_resource = cv2.cvtColor(np.array(pyautogui.screenshot()), cv2.COLOR_RGB2BGR)        element_location = is_this_element_on_the_screen(image_resource, screen_resource)    print("Found")    return element_locationdef get_skadi():    print("Looking for Skadi")    image_resource = cv2.imread("images/skadi_support.bmp", 0)    for i in range(0, 3):        screen_resource = cv2.cvtColor(np.array(pyautogui.screenshot()), cv2.COLOR_RGB2BGR)        skadi_location = is_this_element_on_the_screen(image_resource, screen_resource)        if skadi_location != None:            return skadi_location        # scroll down        pyautogui.moveTo(819, 929)        time.sleep(0.5)        pyautogui.dragTo(819, 305, 3)        time.sleep(1)    print("No skadi were found")    return Nonedef wait_until_support_list_is_refreshed():    print("waiting for supports...")    return wait_until_is_gone("images/no_button.bmp")def wait_until_ap_is_refilled():    print("waiting for ap refill...")    return wait_until_is_gone("images/cancel_button.bmp")def check_if_is_the_first_time():    image_resource = cv2.imread("images/startquest.bmp", 0)    screen_resource = cv2.cvtColor(np.array(pyautogui.screenshot()), cv2.COLOR_RGB2BGR)    start_button = is_this_element_on_the_screen(image_resource, screen_resource)        if start_button != None:        pyautogui.click(start_button[0]-25, start_button[1]-25)        time.sleep(0.5)def wait_until_arash_is_ready():    print("waiting for arash...")    arash_skill = wait_until_is_show("images/arash_skill.bmp")    pyautogui.click(arash_skill[0]+100, arash_skill[1]-50)    time.sleep(3)def wait_until_edmond_is_ready():    print("waiting for edmond...")    return wait_until_is_show("images/edmond_skill.bmp")def wait_for_battle_results():    print("waiting for battle results...")    return wait_until_is_show("images/edmond_eyes.bmp")def wait_until_support_list_is_ready():    print("waiting for support list...")    return wait_until_is_show("images/event_bonus.bmp")def did_i_ran_out_of_ap():    image_resource = cv2.imread("images/scrollbar.bmp", 0)    screen_resource = cv2.cvtColor(np.array(pyautogui.screenshot()), cv2.COLOR_RGB2BGR)    return is_this_element_on_the_screen(image_resource, screen_resource)def can_use_bronze_apples():    image_resource = cv2.imread("images/apple_bronze.bmp", 0)    screen_resource = cv2.cvtColor(np.array(pyautogui.screenshot()), cv2.COLOR_RGB2BGR)    return is_this_element_on_the_screen(image_resource, screen_resource)def can_use_silver_apples():    image_resource = cv2.imread("images/apple_silver.bmp", 0)    screen_resource = cv2.cvtColor(np.array(pyautogui.screenshot()), cv2.COLOR_RGB2BGR)    return is_this_element_on_the_screen(image_resource, screen_resource)def can_use_golden_apples():    image_resource = cv2.imread("images/apple_golden.bmp", 0)    screen_resource = cv2.cvtColor(np.array(pyautogui.screenshot()), cv2.COLOR_RGB2BGR)    return is_this_element_on_the_screen(image_resource, screen_resource)# Main# TODO user level up that add 1 friend slot break the repeat system# AP refill broke (will always try to use bronze applesfirst_refresh = Trueservant_cards_indexes = [0, 1, 2, 3, 4]servant_cards_coords = [[224, 750], [592, 773], [931, 721], [1297, 755], [1687, 755]]print("Waiting...")time.sleep(5)print("LETS FUCKING GO")while True:    skadi_location = get_skadi()    if skadi_location != None:        first_refresh = True        # press over skadi        pyautogui.click(x=skadi_location[0], y=skadi_location[1])        time.sleep(3)        # press START QUEST        check_if_is_the_first_time()        # press arash skill 3        wait_until_arash_is_ready()        # press attack        pyautogui.click(x=1626, y=885)        time.sleep(4)        # STELLAAAAAAAAAAAAAAAAAAA        pyautogui.click(x=945, y=317)        time.sleep(3)        # press 2 random cards        for i in range(0, 2):            shuffle(servant_cards_indexes)            card_index = randrange(len(servant_cards_indexes))            card_index = servant_cards_indexes.pop(card_index)            card_coords = servant_cards_coords[card_index]            pyautogui.click(x=card_coords[0], y=card_coords[1])            time.sleep(2)        servant_cards_indexes = [0, 1, 2, 3, 4]        ####################################################### Turn 2        wait_until_edmond_is_ready()        # press waver skill 3        pyautogui.click(x=1284, y=838)        time.sleep(3)        # press waver skill 2        pyautogui.click(x=1162, y=840)        time.sleep(3)        # press waver skill 1        pyautogui.click(x=1034, y=839)        time.sleep(1)        # press over edmond        pyautogui.click(x=807, y=797)        time.sleep(3)        ####################################################### SWAP        # press master skills        pyautogui.click(x=1714, y=471)        time.sleep(2)        # press swap skill        pyautogui.click(x=1553, y=471)        time.sleep(3)        # press skadi (own) face        pyautogui.click(x=1076, y=524)        time.sleep(2)        # press waver face        pyautogui.click(x=791, y=520)        time.sleep(2)        # press replace        pyautogui.click(x=933, y=911)        time.sleep(2)        wait_until_edmond_is_ready()                ####################################################### Turn 2 resume                # press skadi (own) skill 3        pyautogui.click(x=1284, y=838)        time.sleep(1)        # press over edmond        pyautogui.click(x=807, y=797)        time.sleep(3)        # press skadi (own) skill 1        pyautogui.click(x=1034, y=839)        time.sleep(1)        # press over edmond        pyautogui.click(x=807, y=797)        time.sleep(3)        # press skadi (support) skill 1        pyautogui.click(x=137, y=839)        time.sleep(1)        # press over edmond        pyautogui.click(x=807, y=797)        time.sleep(3)        # press edmond skill 2        pyautogui.click(x=713, y=841)        time.sleep(3)        # press attack        pyautogui.click(x=1626, y=885)        time.sleep(4)        # press edmond noble phantasm        pyautogui.click(x=945, y=317)        time.sleep(3)        # press 2 random cards        for i in range(0, 2):            shuffle(servant_cards_indexes)            card_index = randrange(len(servant_cards_indexes))            card_index = servant_cards_indexes.pop(card_index)            card_coords = servant_cards_coords[card_index]            pyautogui.click(x=card_coords[0], y=card_coords[1])            time.sleep(2)        servant_cards_indexes = [0, 1, 2, 3, 4]        wait_until_edmond_is_ready()        ####################################################### Turn 3        # press skadi (support) skill 3        pyautogui.click(x=406, y=838)        time.sleep(1)        # press over edmond        pyautogui.click(x=807, y=797)        time.sleep(3)        # press edmond skill 1        pyautogui.click(x=589, y=838)        time.sleep(3)        # press attack        pyautogui.click(x=1626, y=885)        time.sleep(4)        # press edmond noble phantasm        pyautogui.click(x=945, y=317)        time.sleep(3)        # press 2 random cards        for i in range(0, 2):            shuffle(servant_cards_indexes)            card_index = randrange(len(servant_cards_indexes))            card_index = servant_cards_indexes.pop(card_index)            card_coords = servant_cards_coords[card_index]            pyautogui.click(x=card_coords[0], y=card_coords[1])            time.sleep(2)        servant_cards_indexes = [0, 1, 2, 3, 4]        wait_for_battle_results()        time.sleep(2)        ####################################################### Battle results        #TODO handle mc/player/bond level up        # press center        pyautogui.click(x=879, y=415)        time.sleep(2)        # press center        pyautogui.click(x=879, y=415)        time.sleep(2)        # press next        pyautogui.click(x=1585, y=985)        time.sleep(2)        # press repeat        pyautogui.click(x=1217, y=827)        time.sleep(2)        if did_i_ran_out_of_ap():            # scroll down apple list            pyautogui.moveTo(1463, 410)            pyautogui.dragTo(1463, 600, 1)            time.sleep(1)            if can_use_bronze_apples():                # select bronze apple                pyautogui.click(x=566, y=728)            elif can_use_silver_apples():                # select silver apple                pyautogui.click(x=566, y=522)            elif can_use_golden_apples():                # select golden apple                pyautogui.click(x=566, y=316)            else:                print("No apples left baby")                break            time.sleep(1)            # confirm apple usage            pyautogui.click(x=1222, y=820)            wait_until_ap_is_refilled()        # wait until support list load        wait_until_support_list_is_ready()        time.sleep(1)    else:        if first_refresh:            first_refresh = False        else:            time.sleep(16)        # Press refresh list        pyautogui.click(x=1274, y=191)        time.sleep(2)        # Confirm refresh list        pyautogui.click(x=1265, y=848)        wait_until_support_list_is_refreshed()        time.sleep(2)